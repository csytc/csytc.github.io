promise：是一种异步编程的一种解决方案
需要处理异步事件的时候：
网络请求；
封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。
所以我们会传入另外一个函数，在数据请求成功的时候，将数据通过传入的函数回调出去
如果只是一个简单的网络请求，这种方案不会给我们带来很大的麻烦。
但是以上方法如果遇到数据繁多，会产生回调地狱，所以使用promise

当开发中有异步操作的时候，就可以给异步操作包装一个promise
异步操作之后会有三种状态：
pedding:等待状态，比如正在进行网络请求，或者定时器没有到时间
fullfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()
reject：拒绝状态，当我们主动毁掉了reject时，就处于该状态，并且会回调.catch()