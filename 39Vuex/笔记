vuex是一个专门为vue.js应用程序开发的状态管理模式
它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化
状态管理又是：可以简单的看成把需要多个组件共享的变量全部存储在一个对象里面。
然后，将这个对象放在顶层的vue实例中，让其他组件可以使用。
vuex就是为了提供这样一个在多个组件间共享状态的插件

有什么状态需要我们在多个组件共享：
大型开放，多个状态，多个界面的共享问题。
用户的登录状态，用户名称，头像地理位置信息
商品的收藏、购物车中的物品

单界面的状态管理:
state:状态，
view：视图层，可以针对state的变化，显示不同的信息。
actions：这里的actions主要是用户的各种操作，如点击等，会导致状态的转变

状态管理：vue components => actions => mutations => state => vue components 这个流程
浏览器中有一个devtools工具可以追踪是什么组件所修改了state

vuex的核心概念：
state单一状态树：也可以翻译为单一数据源
如果状态信息是保存到多个store对象中，那么之后的管理和维护等等都会变得非常困难。
所以vuex也使用了单一状态树来管理应用层级的全部状态

getters类似于computed对state里面的数据进行计算,对数据进行修饰而不改变源数据

mutation：vuex的store状态的更新唯一方式：提交mutation。
mutation主要包括两部分：
事件类型
回调函数，该回调函数的第一个参数就是state。
通过mutation更新： this.$store.commit("事件类型",传入的参数)
这里的传入参数叫做payload：负载

上面通过commit进行提交是一种普通的方式
vue还提供了另外一种风格，他是一个包含type属性的对象

mutation响应规则：vuex的store中的state是响应式的，当state中的数据发生改变时，vue组件会自动更新，
state中的这些属性都会被加入到响应式系统中，而响应式系统会监听属性的变化。当属性发生变化时，会通知所有
界面中用到该属性的地方，让界面发生改变。【注】：需要在state中初始化的数据才能响应式，后来添加进去的数据不行

通常情况下，vuex要求我们mutation中的方法必须是同步方法：
主要原因是当我们使用devtools，devtools可以帮助我们捕捉mutations快照
但是如果是异步操作，那么devtools将不能很好的追踪这个操作什么时候完成

Action：在某些情况下，我们确实需要进行异步操作，比如网络请求，则使用action来代替mutation

modules:为防止单一状态树state里面数据过于臃肿，vuex允许我们将store分割成模块，在modeles中定义新的模块，而这个模块里又可以定义state，action，
mutations，getters
获取modules里面的数据：$store.state.a.name
修改modules里面的数据：与之前一样

所写的modules，actions，getters，mutations一般可以单独抽出去新文件
